/*Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.
OJ's undirected graph serialization:
Nodes are labeled uniquely.
We use # as a separator for each node, and , as a separator for node label and each neighbor of the node.
As an example, consider the serialized graph {0,1,2#1,2#2,2}.
The graph has a total of three nodes, and therefore contains three parts as separated by #.
	1. First node is labeled as 0. Connect node 0 to both nodes 1 and 2.
	2. Second node is labeled as 1. Connect node 1 to node 2.
	3. Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.
Visually, the graph looks like the following:
       1
      / \
     /   \
    0 --- 2
         / \
         \_/
Subscribe to see which companies asked this question
*/
//思路:用队列来进行BFS；用map来存储访问过的节点。
	/**
	 * Definition for undirected graph.
	 * class UndirectedGraphNode {
	 *     int label;
	 *     List<UndirectedGraphNode> neighbors;
	 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
	 * };
	 */
	public class Solution {
	    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
	        if(node == null){
	            return null;
	        }
	        
	        LinkedList<UndirectedGraphNode> que = new LinkedList<UndirectedGraphNode>();
	        HashMap<UndirectedGraphNode,UndirectedGraphNode> map = new HashMap<UndirectedGraphNode,UndirectedGraphNode>();
	        
	        UndirectedGraphNode newhead = new UndirectedGraphNode(node.label);
	        
	        que.add(node);
	        map.put(node,newhead);
	        
	        while(!que.isEmpty()){
	            UndirectedGraphNode curr = que.pop();
	            List<UndirectedGraphNode> neighbor = curr.neighbors;
	            for(UndirectedGraphNode tmp : neighbor){
	                if(!map.containsKey(tmp)){
	                    UndirectedGraphNode copy = new UndirectedGraphNode(tmp.label);
	                    map.put(tmp,copy);
	                    map.get(curr).neighbors.add(copy);
	                    que.add(tmp);
	                }
	                else{
	                    map.get(curr).neighbors.add(map.get(tmp));
	                }
	            }
	        }
	        return newhead;
	    }
	    
	}

