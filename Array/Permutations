/*Given a collection of numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].
*/
思路:
	第i+1个数插入前i个数的排列组合的每个位置。
public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
 
	    //start from an empty list
	    List<Integer> tmp = new ArrayList<Integer>();
	    result.add(tmp);
 
	    for (int i = 0; i < nums.length; i++) {
		//list of list in current iteration of the array num
		    ArrayList<List<Integer>> current = new ArrayList<List<Integer>>();
 
		    for (List<Integer> l: result) {
			    // # of locations to insert is largest index + 1
			    for (int j = 0; j < l.size()+1; j++) {
				    // + add num[i] to different locations
				    l.add(j, nums[i]);
 
				    ArrayList<Integer> temp = new ArrayList<Integer>(l);
				    current.add(temp);
 
				    //System.out.println(temp);
 
				    // - remove num[i] add
				    l.remove(j);
			    }
		    }
 
		    result = new ArrayList<List<Integer>>(current);
	    }
 
	    return result;

    }
}
