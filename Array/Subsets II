/*Given a collection of integers that might contain duplicates, nums, return all possible subsets.
Note:
	• Elements in a subset must be in non-descending order.
	• The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,2], a solution is:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]
*/
//思路：
//	与上一题类似，
//	当到nums[i]时，只有两种可能，1：在经过nums[i-1]后的结果上的每一个set后加上nums[i] 2：加上单个nums[i]的结果。但是，在进行1和2的过程中，有可能遇到重复的情况。对于情况2很简单，只要判断一下是否nums[i-1]=nums[i]即可。对于情况1，我们要考虑一下是否需要开辟新的内存来copy原来的，如果nums[i-1]！=nums[i]我们就和上一题一样需要copy。如果nums[i-1]=nums[i]，我们就不需要copy，直接在每一个后面加上nums[i]就好了。
public ArrayList<ArrayList<Integer>> subsetsWithDup(int[] num) {
	if (num == null)
		return null;
 
	Arrays.sort(num);
 
	ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
	ArrayList<ArrayList<Integer>> prev = new ArrayList<ArrayList<Integer>>();
 
	for (int i = num.length-1; i >= 0; i--) {
 
		//get existing sets
		if (i == num.length - 1 || num[i] != num[i + 1] || prev.size() == 0) {
			prev = new ArrayList<ArrayList<Integer>>();
			for (int j = 0; j < result.size(); j++) {
				prev.add(new ArrayList<Integer>(result.get(j)));
			}
		}
 
		//add current number to each element of the set
		for (ArrayList<Integer> temp : prev) {
			temp.add(0, num[i]);
		}
 
		//add each single number as a set, only if current element is different with previous
		if (i == num.length - 1 || num[i] != num[i + 1]) {
			ArrayList<Integer> temp = new ArrayList<Integer>();
			temp.add(num[i]);
			prev.add(temp);
		}
 
		//add all set created in this iteration
		for (ArrayList<Integer> temp : prev) {
			result.add(new ArrayList<Integer>(temp));
		}
	}
 
	//add empty set
	result.add(new ArrayList<Integer>());
 
	return result;
}
