/*Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.
If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).
The replacement must be in-place, do not allocate extra memory.
Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
*/
//思路: 所谓的排列就是按照元素的升序一个个列出下一个组合.例如给出123,则下一个就是1,3,2;->2,1,3;->2,3,1;->3,1,2->3,2,1->1,2,3.
//	这样，我们就从后往前找到第一个nums[i]<nums[i+1]。然后把i-end的比nums[i]大的最少的数跟它交换，然后i+1-end区间的数排序就好了。
	public class Solution {
	    public void nextPermutation(int[] nums) {
	        if(nums.length <= 1){
	            return;
	        }
	        int i = nums.length - 1;
	        while(i > 0 && nums[i-1] >= nums[i]){
	            i--;
	        }
	        if(i == 0){
	            Arrays.sort(nums);
	            return;
	        }
	        i--;
	        int j = nums.length - 1;
	        while(j > i && nums[j] <= nums[i]){
	            j--;
	        }
	        swap(nums,i,j);
	        Arrays.sort(nums,i+1,nums.length);
	        return;
	        
	    }
	    public void swap(int[] nums,int i,int j){
	        int tmp = nums[i];
	        nums[i] = nums[j];
	        nums[j] = tmp;
	        return;
	    }
	}
