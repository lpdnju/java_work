/*Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.
For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.
Note: m and n will be at most 100.
*/
//思路：
//与上题类似，只不过如果dp[i][j]有障碍，直接置零就好。
	public class Solution {
	    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
	    int rowl = obstacleGrid.length;
	    int columnl = obstacleGrid[0].length; 
	    int[][] dp = new int[rowl][columnl];
	    
	    for(int i = 0;i < rowl;i++){
	        Arrays.fill(dp[i],0);
	    }
	    
	    for(int i = 0;i < rowl;i++){
	        if(obstacleGrid[i][0] == 1){
	            break;
	        }
	        dp[i][0] = 1;
	    }
	    
	    for(int j = 0;j < columnl;j++){
	        if(obstacleGrid[0][j] == 1){
	            break;
	        }
	        dp[0][j] = 1;
	        
	    }
	    
	    for(int i = 1;i < rowl;i++){
	        for(int j = 1;j < columnl;j++){
	            if(obstacleGrid[i][j] == 1){
	                dp[i][j] = 0;
	            }else{
	                dp[i][j] = dp[i-1][j]+dp[i][j-1];
	            }
	            
	        }
	    }
	    return dp[rowl-1][columnl-1];    
	    }
	}
