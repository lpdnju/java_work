//Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are +, - and *.
//Example 1
//Input: "2-1-1".
//((2-1)-1) = 0
//(2-(1-1)) = 2
//Output: [0, 2]
//Example 2
//Input: "2*3-4*5"
//(2*(3-(4*5))) = -34
//((2*3)-(4*5)) = -14
//((2*(3-4))*5) = -10
//(2*((3-4)*5)) = -10
//(((2*3)-4)*5) = 10
//Output: [-34, -14, -10, -10, 10]
//思路：
//左右子串分别计算所有可能，然后全排列。
public class Solution {
    public List<Integer> diffWaysToCompute(String input) {
        List<Integer> result = new ArrayList<Integer>();
        for(int i = 0;i < input.length();i++){
            if(input.charAt(i) == '+' || input.charAt(i) == '-' || input.charAt(i) == '*'){
                List<Integer> left = diffWaysToCompute(input.substring(0,i));
                List<Integer> right = diffWaysToCompute(input.substring(i+1));
                
                for(int j : left){
                    for(int k : right){
                        if(input.charAt(i) == '+'){
                            result.add(j + k);
                        }else if(input.charAt(i) == '-'){
                            result.add(j - k);
                        }else if(input.charAt(i) == '*'){
                            result.add(j * k);
                        }
                    }
                }
            }
        }
        if(result.isEmpty()){
            result.add(Integer.valueOf(input));
        }
        return result;
    }
}
