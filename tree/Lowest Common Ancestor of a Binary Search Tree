/*Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.
According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes v and w as the lowest node in T that has both v and w as descendants (where we allow a node to be a descendant of itself).”
        _______6______
       /              \
    ___2__          ___8__
   /      \        /      \
   0      _4       7       9
         /  \
         3   5
For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
*/
//思路：
	//共同的祖先，这个对于搜索二叉树就很简单了，如果两个节点p.q都比root小，递归（p,q,root.left）就好了。都比root大就（p,q,root.right）。
	//如果一大一小，之间返回root。
	/**
	 * Definition for a binary tree node.
	 * public class TreeNode {
	 *     int val;
	 *     TreeNode left;
	 *     TreeNode right;
	 *     TreeNode(int x) { val = x; }
	 * }
	 */
	public class Solution {
	    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
	     if(root==null||p==null||q==null){
	         return null;
	     }
	     if(Math.max(p.val,q.val)<root.val){
	         return lowestCommonAncestor(root.left,p,q);
	     }else if(Math.min(p.val,q.val)>root.val){
	         return lowestCommonAncestor(root.right,p,q);
	     }else{
	         return  root;
	     }
	    }
	}
