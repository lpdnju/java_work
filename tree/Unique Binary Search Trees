/*Given n, how many structurally unique BST's (binary search trees) that store values 1...n?
For example,
Given n = 3, there are a total of 5 unique BST's.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/
//思路：
//	对每一个<i的数j作为root时，左边0~j-1有dp[j]种方式，右边j+1~i个数有dp[i-(j+1)]种方式。
	public class Solution {
	    public int numTrees(int n) {
	        if(n == 1){
	            return 1;
	        }
	        if(n == 2){
	            return 2;
	        }
	        int[] dp = new int[n+1];
	        dp[0] = 1;
	        dp[1] = 1;
	        dp[2] = 2;
	        //对每一个<i的数j作为root时，左边0~j-1有dp[j]种方式，右边j+1~i个数有dp[i-(j+1)]种方式。
	        for(int i = 3;i < dp.length;i++){
	            int tmp = 0;
	            for(int j = 0;j < i;j++){
	                tmp += (dp[j]*dp[i-j-1]);
	            }
	            dp[i] = tmp;
	        }
	        return dp[n];
	    }
	}
