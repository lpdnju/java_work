/*Given n, generate all structurally unique BST's (binary search trees) that store values 1...n.
For example,
Given n = 3, your program should return all 5 unique BST's shown below.
   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
*/
	public class Solution {
	    public List<TreeNode> generateTrees(int n) {
	        if(n == 0){
	            return new ArrayList<TreeNode>();
	        }
	        return combineTree(1,n);
	    }
	    public List<TreeNode> combineTree(int begin,int end){
	        List<TreeNode> result = new ArrayList<TreeNode>();
	        if(begin > end){
	            result.add(null);
	            return result;
	        }
	        for(int i=begin;i<=end;i++){
	            List<TreeNode> left = combineTree(begin,i-1);
	            List<TreeNode> right = combineTree(i+1,end);
	            for(TreeNode a : left){
	                for(TreeNode b : right){
	                    TreeNode root = new TreeNode(i);
	                    root.left = a;
	                    root.right = b;
	                    result.add(root);
	                }
	            }
	        }
	        return result;
	    }
	}
